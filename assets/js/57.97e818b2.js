(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{336:function(s,n,e){"use strict";e.r(n);var a=e(14),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" /")]),s._v(" "),n("h4",{attrs:{id:"扫描大键-scanning-for-big-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扫描大键-scanning-for-big-keys"}},[s._v("#")]),s._v(" 扫描大键（Scanning for big keys）")]),s._v(" "),n("p",[s._v("在这种特殊模式下， redis-cli 用作密钥空间分析器。它扫描数据集中的大键，但也提供有关数据集所包含的数据类型的信息。此模式使用 --bigkeys 选项启用，并生成详细输出：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ redis-cli --bigkeys\n\n# Scanning the entire keyspace to find biggest keys as well as\n# average sizes per key type.  You can use -i 0.01 to sleep 0.01 sec\n# per SCAN command (not usually needed).\n\n[00.00%] Biggest string found so far 'key-419' with 3 bytes\n[05.14%] Biggest list   found so far 'mylist' with 100004 items\n[35.77%] Biggest string found so far 'counter:__rand_int__' with 6 bytes\n[73.91%] Biggest hash   found so far 'myobject' with 3 fields\n\n-------- summary -------\n\nSampled 506 keys in the keyspace!\nTotal key length in bytes is 3452 (avg len 6.82)\n\nBiggest string found 'counter:__rand_int__' has 6 bytes\nBiggest   list found 'mylist' has 100004 items\nBiggest   hash found 'myobject' has 3 fields\n\n504 strings with 1403 bytes (99.60% of keys, avg size 2.78)\n1 lists with 100004 items (00.20% of keys, avg size 100004.00)\n0 sets with 0 members (00.00% of keys, avg size 0.00)\n1 hashs with 3 fields (00.20% of keys, avg size 3.00)\n0 zsets with 0 members (00.00% of keys, avg size 0.00)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("在输出的第一部分中，将报告遇到的每个新密钥都大于前一个较大的密钥（相同类型）。摘要部分提供有关 Redis 实例内数据的一般统计信息。"),n("br"),s._v("该程序使用 SCAN 命令，因此可以对繁忙的服务器执行该命令，而不会影响操作，但是可以使用 -i 选项来限制每个 SCAN 命令的指定秒数的扫描过程。"),n("br"),s._v("例如， -i 0.01 会大大减慢程序的执行速度，但也会将服务器上的负载减少到可以忽略不计的数量。"),n("br"),s._v("请注意，摘要还会以更简洁的形式报告每次找到的最大键。初始输出只是为了在针对非常大的数据集运行时尽快提供一些有趣的信息。")])])}),[],!1,null,null,null);n.default=t.exports}}]);