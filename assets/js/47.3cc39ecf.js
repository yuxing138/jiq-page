(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{329:function(s,n,e){"use strict";e.r(n);var a=e(14),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" /")]),s._v(" "),n("h4",{attrs:{id:"lfu算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lfu算法"}},[s._v("#")]),s._v(" LFU算法")]),s._v(" "),n("h5",{attrs:{id:"传统的lfu算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统的lfu算法"}},[s._v("#")]),s._v(" 传统的LFU算法")]),s._v(" "),n("p",[s._v("传统的LFU算法，被称为最不频繁使用，根据数据被访问的次数决策是否淘汰。")]),s._v(" "),n("blockquote",[n("p",[s._v("注意：这种淘汰策略的问题比较明显，比如，某些数据很久未被访问，却不会被淘汰，因为它们之前被访问很多次。")])]),s._v(" "),n("h5",{attrs:{id:"redis的lfu算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis的lfu算法"}},[s._v("#")]),s._v(" Redis的LFU算法")]),s._v(" "),n("p",[s._v("与传统LFU不同，Redis即统计数据被访问次数，也考虑数据被访问的时间。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//使用16bit作为访问时间、使用8bit作为访问频率\n    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or\n                            * LFU data (least significant 8 bits frequency\n                            * and most significant 16 bits access time). */\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void updateLFU(robj *val) {\n    unsigned long counter = LFUDecrAndReturn(val);  //增长算法\n    counter = LFULogIncr(counter);                  //衰退算法\n    val->lru = (LFUGetTimeInMinutes()<<8) | counter;//更新为当前时间\n}\n\nunsigned long LFUGetTimeInMinutes(void) {\n    return (server.unixtime/60) & 65535;     //获取当前时间/60，转为16bit\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h6",{attrs:{id:"访问次数衰退算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问次数衰退算法"}},[s._v("#")]),s._v(" 访问次数衰退算法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("unsigned long LFUDecrAndReturn(robj *o) {\n    unsigned long ldt = o->lru >> 8;            //取出时间（前16bit）\n    unsigned long counter = o->lru & 255;       //取出计数器（后8bit）\n    unsigned long num_periods = server.lfu_decay_time ? LFUTimeElapsed(ldt) / server.lfu_decay_time : 0; //存活时间/衰退周期，表示衰退数\n    if (num_periods)                                                     //如果衰退数=0，即1个周期，counter保持不变。如果衰退数>0，即1个周期，counter下降。\n        counter = (num_periods > counter) ? 0 : counter - num_periods;   //衰退数>counter，counter归零。衰退数<=counter，counter=counter-衰退数。\n    return counter;\n}\n\nunsigned long LFUTimeElapsed(unsigned long ldt) {\n    unsigned long now = LFUGetTimeInMinutes(); //获取当前时间\n    if (now >= ldt) return now-ldt;     //如果当前时间>ldt，取出存活时间\n    return 65535-ldt+now;               //如果ldt>当前时间，取出存活时间（now+65535-ldt）\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h6",{attrs:{id:"访问次数增长算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问次数增长算法"}},[s._v("#")]),s._v(" 访问次数增长算法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#define LFU_INIT_VAL 5\nuint8_t LFULogIncr(uint8_t counter) {\n    if (counter == 255) return 255;                //如果counter=255，保持不变。\n    double r = (double)rand()/RAND_MAX;            //生成小于1的随机数r\n    double baseval = counter - LFU_INIT_VAL;\n    if (baseval < 0) baseval = 0;                  //如果counter<5，p=1。如果counter>5，p<1。\n    double p = 1.0/(baseval*server.lfu_log_factor+1);\n    if (r < p) counter++;                          //如果p大于r，counter+1。（即counter值越大增长越慢。）\n    return counter;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h6",{attrs:{id:"执行驱逐"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行驱逐"}},[s._v("#")]),s._v(" 执行驱逐")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int performEvictions(void) {\n..\n        if (server.maxmemory_policy & (MAXMEMORY_FLAG_LRU|MAXMEMORY_FLAG_LFU) ||\n            server.maxmemory_policy == MAXMEMORY_VOLATILE_TTL)                   //LRU、LFU、TTL的驱逐逻辑\n        {\n            struct evictionPoolEntry *pool = EvictionPoolLRU;\n\n            while(bestkey == NULL) {\n                unsigned long total_keys = 0, keys;\n\n                for (i = 0; i < server.dbnum; i++) {\n                    db = server.db+i;\n                    dict = (server.maxmemory_policy & MAXMEMORY_FLAG_ALLKEYS) ?\n                            db->dict : db->expires;\n                    if ((keys = dictSize(dict)) != 0) {\n                        evictionPoolPopulate(i, dict, db->dict, pool);        //驱逐池填充\n                        total_keys += keys;\n                    }\n                }\n                if (!total_keys) break; /* No keys to evict. */\n\n                /* Go backward from best to worst element to evict. */\n                for (k = EVPOOL_SIZE-1; k >= 0; k--) {\n                    if (pool[k].key == NULL) continue;\n                    bestdbid = pool[k].dbid;\n\n                    if (server.maxmemory_policy & MAXMEMORY_FLAG_ALLKEYS) {\n                        de = dictFind(server.db[pool[k].dbid].dict,           //从驱逐池中寻找目标\n                            pool[k].key);\n                    } else {\n                        de = dictFind(server.db[pool[k].dbid].expires,\n                            pool[k].key);\n                    }\n\n                    /* Remove the entry from the pool. */\n                    if (pool[k].key != pool[k].cached)\n                        sdsfree(pool[k].key);\n                    pool[k].key = NULL;                                       //释放\n                    pool[k].idle = 0;\n\n                    if (de) {\n                        bestkey = dictGetKey(de);\n                        break;\n                    } else {\n                        /* Ghost... Iterate again. */\n                    }\n                }\n            }\n        }\n..\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br")])]),n("h6",{attrs:{id:"驱逐池填充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#驱逐池填充"}},[s._v("#")]),s._v(" 驱逐池填充")]),s._v(" "),n("p",[s._v("驱逐的基本思路：是随机采样，再根据idle排序，再驱逐。")]),s._v(" "),n("blockquote",[n("p",[s._v("注意：并不是全库排序，并不是驱逐最古老的数据。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# maxmemory-samples 5      //采样池大小\n#define EVPOOL_SIZE 16     //驱逐池大小\n\nstruct evictionPoolEntry {\n    unsigned long long idle;    /* Object idle time (inverse frequency for LFU) */\n    sds key;                    /* Key name. */\n    sds cached;                 /* Cached SDS object for key name. */\n    int dbid;                   /* Key DB number. */\n};\n\nvoid evictionPoolPopulate(int dbid, dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {\n    int j, k, count;\n    dictEntry *samples[server.maxmemory_samples];//采样池\n\n    count = dictGetSomeKeys(sampledict,samples,server.maxmemory_samples); //随机采样\n    for (j = 0; j < count; j++) {\n        unsigned long long idle;\n        sds key;\n        robj *o;\n        dictEntry *de;\n\n        de = samples[j];         //采样\n        key = dictGetKey(de);    //采样\n\n        if (server.maxmemory_policy != MAXMEMORY_VOLATILE_TTL) {\n            if (sampledict != keydict) de = dictFind(keydict, key);\n            o = dictGetVal(de);  //采样\n        }\n\n        if (server.maxmemory_policy & MAXMEMORY_FLAG_LRU) {\n            idle = estimateObjectIdleTime(o);                            //LRU的idle算法\n        } else if (server.maxmemory_policy & MAXMEMORY_FLAG_LFU) {\n            idle = 255-LFUDecrAndReturn(o);                              //LFU的idle算法\n        } else if (server.maxmemory_policy == MAXMEMORY_VOLATILE_TTL) {\n            idle = ULLONG_MAX - (long)dictGetVal(de);                    //TTL的idle算法\n        } else {\n            serverPanic("Unknown eviction policy in evictionPoolPopulate()");\n        }\n\n        k = 0;\n        while (k < EVPOOL_SIZE &&\n               pool[k].key &&\n               pool[k].idle < idle) k++;   //遍历pool，通过idle确定k。\n..\n\n//填充k\n        int klen = sdslen(key);\n        if (klen > EVPOOL_CACHED_SDS_SIZE) {\n            pool[k].key = sdsdup(key);\n        } else {\n            memcpy(pool[k].cached,key,klen+1);\n            sdssetlen(pool[k].cached,klen);\n            pool[k].key = pool[k].cached;\n        }\n        pool[k].idle = idle;\n        pool[k].dbid = dbid;\n    }\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);